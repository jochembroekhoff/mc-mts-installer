package nl.jochembroekhoff.mc_mts_installer;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * Main class for the MC-MTS Installer
 * @author Jochem Broekhoff
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();

        jDialog1.setTitle("Installation Done");
        jDialog1.setBounds(new java.awt.Rectangle(0, 0, 475, 195));
        jDialog1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialog1.setIconImage(getIconImage());
        jDialog1.setMinimumSize(new java.awt.Dimension(475, 195));
        jDialog1.setModal(true);
        jDialog1.setPreferredSize(new java.awt.Dimension(475, 195));

        jLabel5.setFont(new java.awt.Font("Consolas", 1, 48)); // NOI18N
        jLabel5.setText("Installation Done");

        jLabel6.setText("The installation is done. You can now start your server by executing the start.sh/start.bat file.");

        jLabel9.setText("they won't update automatically unless the plugin itselfs contains an updater.");

        jLabel8.setText("If you're using SpigotMC or CraftBukkit, and you've added some plugins,");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Notice");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDialog2.setBounds(new java.awt.Rectangle(0, 0, 582, 397));
        jDialog2.setMinimumSize(new java.awt.Dimension(582, 397));
        jDialog2.setName("Open"); // NOI18N

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MC-MTS Installer");
        setBounds(new java.awt.Rectangle(0, 0, 488, 345));
        setMinimumSize(new java.awt.Dimension(488, 250));

        jLabel1.setFont(new java.awt.Font("Consolas", 1, 48)); // NOI18N
        jLabel1.setText("MC-MTS Installer");

        jLabel2.setText("You're about installing a server you've created. \nClick the button to start the download process.");

        jButton1.setText("Start");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Progress");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Log");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
        );

        jLabel10.setForeground(new java.awt.Color(153, 153, 153));
        jLabel10.setText("Version 1.0-BETA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        //UUH :/ Nothing!
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Disable the "Start" button
        jButton1.setEnabled(false);
        
        try {
            JSONParser parser = new JSONParser();

            log("Reading settings");
            addProgress(10);
            
            InputStream settingsFile = getClass().getResourceAsStream("/settings.json");
            String settingsString = convertStreamToString(settingsFile);
            Object settingsObj = parser.parse(settingsString);
            JSONObject settings = (JSONObject) settingsObj;
            
            if(!settings.containsKey("isDefaultFile") &&
                    settings.containsKey("startExtention") &&
                    settings.containsKey("type") &&
                    settings.containsKey("version")) {
                /*
                Log information
                */
                log("-----------------");
                log("Some information:");
                log("Start file: start." + settings.get("startExtention"));
                log("Server type: " + settings.get("type"));
                log("Server version: " + settings.get("version"));
                if(settings.containsKey("plugins")) {
                    //TODO: List plugin IDs (+ optionally name from CurseForge API)
                    log("This server has some plugins: this is TODO");
                }

                /*
                Open dialog to choose location
                */
                log("Asking for install location");
                addProgress(10);
                jFileChooser1.setCurrentDirectory(new java.io.File("."));
                jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                jFileChooser1.setAcceptAllFileFilterUsed(false);
                if(jFileChooser1.showOpenDialog(jDialog2) == JFileChooser.APPROVE_OPTION) {
                    /*
                    Log installation directory
                    */
                    log("Install dir: " + jFileChooser1.getCurrentDirectory());
                    
                    /*
                    Download start file
                    */
                    addProgress(10);
                    log("Downloading start file");
                    try {
                        URL url = new URL(Main.FILES_HOST + "/start." + settings.get("startExtention"));
                        String dir = jFileChooser1.getCurrentDirectory() + "";
                        String file = "start." + settings.get("startExtention");
                        
                        if(downloadFile(url, dir, file)) {
                            /*
                            Success! Downloaded start file
                            */
                            log("Downloaded start file");
                            
                            /*
                            Download server.jar (server binary)
                            The file is zip-compressed, so extract it after downloading
                            */
                            addProgress(10);
                            log("Downloading server binary");
                            try {
                                url = new URL(Main.FILES_HOST + "/servers/"
                                        + settings.get("type") + "/"
                                        + settings.get("version") + "/server.zip");
                                file = "server.zip";
                                
                                if(downloadFile(url, dir, file)) {
                                    log("Downloaded server binary");
                                    addProgress(10);
                                    log("Extracting server binary");
                                    if(unZipIt(new File(dir, file).toString(), dir)) {
                                        log("Server binary has been extracted");
                                        if(settings.get("type") == "spigotmc"
                                                || settings.get("type") == "craftbukkit") {
                                            /*
                                            Download plugins
                                            */
                                            log("Downloading plugins");
                                            addProgress(10);
                                            done();
                                        } else {
                                            log("Done! Trying to delete compressed server binary");
                                            done();
                                            (new File(dir, file)).delete();
                                        }
                                    } else {
                                        /*
                                        Finish with error
                                        */
                                        done(true);
                                        log("------------------------------------------");
                                        log("-- Server binary couldn't be downloaded --");
                                        log("------------------------------------------");
                                    }
                                } else {
                                    /*
                                    Finish with error
                                    */
                                    done(true);
                                    log("------------------------------------------");
                                    log("-- Server binary couldn't be downloaded --");
                                    log("------------------------------------------");
                                }
                            } catch(MalformedURLException e) {
                                /*
                                Finish with error
                                */
                                done(true);
                                log("----------------------------------------");
                                log("-- URL for server binary is incorrect --");
                                log("----------------------------------------");
                            }
                        } else {
                            /*
                            Finish with error
                            */
                            done(true);
                            log("---------------------------------------");
                            log("-- Start file couldn't be downloaded --");
                            log("---------------------------------------");
                        }
                    } catch(MalformedURLException e) {
                        /*
                        Finish with error
                        */
                        done(true);
                        log("-------------------------------------");
                        log("-- URL for start file is incorrect --");
                        log("-------------------------------------");
                    }
                } else {
                    /*
                    Finish (With actually an error) :D
                    */
                    done(true);
                    log("-------------------------");
                    log("-- Make any selection! --");
                    log("-------------------------");
                }
            } else {
                log("This installer is not set up yet. Go to "
                        + "http://jochembroekhoff.nl/mc-mts to set up an installer.");
                
                /*
                Finish (With actually an error) :D
                */
                done(true);
            }
        } catch(ParseException e) {
            done(true);
            log("----------------------------------");
            log("-- Couldn't parse settings.json --");
            log("----------------------------------");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the SystemLookAndFeel look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    static String convertStreamToString(java.io.InputStream is) {
        java.util.Scanner s = new java.util.Scanner(is).useDelimiter("\\A");
        return s.hasNext() ? s.next() : "";
    }
    
    private JTextArea appendTextToJTextArea(JTextArea textArea, String textToAppend) {
        String currentText;
        
        currentText = textArea.getText();
        
        textArea.setText(currentText + textToAppend + "\n");
        
        return textArea;
    }
    
    private JTextArea log(String message) {
        return appendTextToJTextArea(jTextArea1, message);
    }
    
    private void done(Boolean zeroPercent) {
        if(zeroPercent) { //Is this an error?
            jTextArea1.setText(null); //Clear log
            jProgressBar1.setValue(0); //Reset progress bar
            jButton1.setEnabled(true); //Enable "start" button
        } else {
            done();
        }
    }
    
    private void done() {
        jProgressBar1.setValue(100);
        jButton1.setEnabled(true);
        
        jDialog1.setVisible(true);
    }
    
    private JProgressBar addProgress(JProgressBar jpb, Integer valueToAdd) {
        Integer oval = jpb.getValue();
        jpb.setValue(oval + valueToAdd);
        
        return jpb;
    }
    
    private JProgressBar addProgress(Integer valueToAdd) {
        Integer oval = jProgressBar1.getValue();
        jProgressBar1.setValue(oval + valueToAdd);
        
        return jProgressBar1;
    }
    
    private boolean downloadFile(URL url, String dir, String fileName) {
        try {
            URLConnection urlConn = url.openConnection();
            BufferedInputStream is = new BufferedInputStream(urlConn.getInputStream());
            File out = new File(dir, fileName);
            BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(out));
            
            byte[] b = new byte[8 * 1024];
            int read = 0;
            
            while((read = is.read(b)) > -1) {
                bout.write(b, 0, read);
            }
            
            bout.flush();
            bout.close();
            is.close();
            
            return true;
        } catch(IOException e) {
            return false;
        }
    }
    
    public boolean unZipIt(String zipFile, String outputFolder){
 
        byte[] buffer = new byte[1024];

        try{
            /*
            create output directory is not exists
            */
            File folder = new File(outputFolder);
            if(!folder.exists()){
                    folder.mkdir();
            }

            //get the zip file content
            ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile));
            //get the zipped file list entry
            ZipEntry ze = zis.getNextEntry();

            while(ze!=null){

                String fileName = ze.getName();
                File newFile = new File(outputFolder + File.separator + fileName);

                //create all non exists folders
                //else you will hit FileNotFoundException for compressed folder
                new File(newFile.getParent()).mkdirs();

                FileOutputStream fos = new FileOutputStream(newFile);             

                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }
                fos.close();   
                ze = zis.getNextEntry();
            }
            zis.closeEntry();
            zis.close();

            return true;
        }catch(IOException ex){
          return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    private static final String FILES_HOST = "http://jochembroekhoff.nl/mc-mts/files";
}
